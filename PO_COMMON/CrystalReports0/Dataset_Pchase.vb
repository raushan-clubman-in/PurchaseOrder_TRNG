'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class Dataset1
    Inherits DataSet
    
    Private tablePO_VIEW_PORDERSUMMARY As PO_VIEW_PORDERSUMMARYDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PO_VIEW_PORDERSUMMARY")) Is Nothing) Then
                Me.Tables.Add(New PO_VIEW_PORDERSUMMARYDataTable(ds.Tables("PO_VIEW_PORDERSUMMARY")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PO_VIEW_PORDERSUMMARY As PO_VIEW_PORDERSUMMARYDataTable
        Get
            Return Me.tablePO_VIEW_PORDERSUMMARY
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As Dataset1 = CType(MyBase.Clone,Dataset1)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("PO_VIEW_PORDERSUMMARY")) Is Nothing) Then
            Me.Tables.Add(New PO_VIEW_PORDERSUMMARYDataTable(ds.Tables("PO_VIEW_PORDERSUMMARY")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablePO_VIEW_PORDERSUMMARY = CType(Me.Tables("PO_VIEW_PORDERSUMMARY"),PO_VIEW_PORDERSUMMARYDataTable)
        If (Not (Me.tablePO_VIEW_PORDERSUMMARY) Is Nothing) Then
            Me.tablePO_VIEW_PORDERSUMMARY.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "Dataset1"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Dataset1.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablePO_VIEW_PORDERSUMMARY = New PO_VIEW_PORDERSUMMARYDataTable
        Me.Tables.Add(Me.tablePO_VIEW_PORDERSUMMARY)
    End Sub
    
    Private Function ShouldSerializePO_VIEW_PORDERSUMMARY() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub PO_VIEW_PORDERSUMMARYRowChangeEventHandler(ByVal sender As Object, ByVal e As PO_VIEW_PORDERSUMMARYRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PO_VIEW_PORDERSUMMARYDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPONO As DataColumn
        
        Private columnPODATE As DataColumn
        
        Private columnVENDORCODE As DataColumn
        
        Private columnPODEPARTMENT As DataColumn
        
        Private columnVENDORNAME As DataColumn
        
        Private columnPOVALUE As DataColumn
        
        Private columnPOTOTALVAT As DataColumn
        
        Private columnPOTOTALTAX As DataColumn
        
        Private columnPOADVANCE As DataColumn
        
        Private columnPOBALANCE As DataColumn
        
        Private columnITEMCODE As DataColumn
        
        Private columnITEMNAME As DataColumn
        
        Private columnUOM As DataColumn
        
        Private columnQUANTITY As DataColumn
        
        Private columnRATE As DataColumn
        
        Private columnDISCOUNT As DataColumn
        
        Private columnTOTAL As DataColumn
        
        Private columnADDDATETIME As DataColumn
        
        Friend Sub New()
            MyBase.New("PO_VIEW_PORDERSUMMARY")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property PONOColumn As DataColumn
            Get
                Return Me.columnPONO
            End Get
        End Property
        
        Friend ReadOnly Property PODATEColumn As DataColumn
            Get
                Return Me.columnPODATE
            End Get
        End Property
        
        Friend ReadOnly Property VENDORCODEColumn As DataColumn
            Get
                Return Me.columnVENDORCODE
            End Get
        End Property
        
        Friend ReadOnly Property PODEPARTMENTColumn As DataColumn
            Get
                Return Me.columnPODEPARTMENT
            End Get
        End Property
        
        Friend ReadOnly Property VENDORNAMEColumn As DataColumn
            Get
                Return Me.columnVENDORNAME
            End Get
        End Property
        
        Friend ReadOnly Property POVALUEColumn As DataColumn
            Get
                Return Me.columnPOVALUE
            End Get
        End Property
        
        Friend ReadOnly Property POTOTALVATColumn As DataColumn
            Get
                Return Me.columnPOTOTALVAT
            End Get
        End Property
        
        Friend ReadOnly Property POTOTALTAXColumn As DataColumn
            Get
                Return Me.columnPOTOTALTAX
            End Get
        End Property
        
        Friend ReadOnly Property POADVANCEColumn As DataColumn
            Get
                Return Me.columnPOADVANCE
            End Get
        End Property
        
        Friend ReadOnly Property POBALANCEColumn As DataColumn
            Get
                Return Me.columnPOBALANCE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMCODEColumn As DataColumn
            Get
                Return Me.columnITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMNAMEColumn As DataColumn
            Get
                Return Me.columnITEMNAME
            End Get
        End Property
        
        Friend ReadOnly Property UOMColumn As DataColumn
            Get
                Return Me.columnUOM
            End Get
        End Property
        
        Friend ReadOnly Property QUANTITYColumn As DataColumn
            Get
                Return Me.columnQUANTITY
            End Get
        End Property
        
        Friend ReadOnly Property RATEColumn As DataColumn
            Get
                Return Me.columnRATE
            End Get
        End Property
        
        Friend ReadOnly Property DISCOUNTColumn As DataColumn
            Get
                Return Me.columnDISCOUNT
            End Get
        End Property
        
        Friend ReadOnly Property TOTALColumn As DataColumn
            Get
                Return Me.columnTOTAL
            End Get
        End Property
        
        Friend ReadOnly Property ADDDATETIMEColumn As DataColumn
            Get
                Return Me.columnADDDATETIME
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PO_VIEW_PORDERSUMMARYRow
            Get
                Return CType(Me.Rows(index),PO_VIEW_PORDERSUMMARYRow)
            End Get
        End Property
        
        Public Event PO_VIEW_PORDERSUMMARYRowChanged As PO_VIEW_PORDERSUMMARYRowChangeEventHandler
        
        Public Event PO_VIEW_PORDERSUMMARYRowChanging As PO_VIEW_PORDERSUMMARYRowChangeEventHandler
        
        Public Event PO_VIEW_PORDERSUMMARYRowDeleted As PO_VIEW_PORDERSUMMARYRowChangeEventHandler
        
        Public Event PO_VIEW_PORDERSUMMARYRowDeleting As PO_VIEW_PORDERSUMMARYRowChangeEventHandler
        
        Public Overloads Sub AddPO_VIEW_PORDERSUMMARYRow(ByVal row As PO_VIEW_PORDERSUMMARYRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPO_VIEW_PORDERSUMMARYRow( _
                    ByVal PONO As String,  _
                    ByVal PODATE As Date,  _
                    ByVal VENDORCODE As String,  _
                    ByVal PODEPARTMENT As String,  _
                    ByVal VENDORNAME As String,  _
                    ByVal POVALUE As Decimal,  _
                    ByVal POTOTALVAT As Decimal,  _
                    ByVal POTOTALTAX As Decimal,  _
                    ByVal POADVANCE As Decimal,  _
                    ByVal POBALANCE As Decimal,  _
                    ByVal ITEMCODE As String,  _
                    ByVal ITEMNAME As String,  _
                    ByVal UOM As String,  _
                    ByVal QUANTITY As Decimal,  _
                    ByVal RATE As Decimal,  _
                    ByVal DISCOUNT As Decimal,  _
                    ByVal TOTAL As Decimal,  _
                    ByVal ADDDATETIME As Date) As PO_VIEW_PORDERSUMMARYRow
            Dim rowPO_VIEW_PORDERSUMMARYRow As PO_VIEW_PORDERSUMMARYRow = CType(Me.NewRow,PO_VIEW_PORDERSUMMARYRow)
            rowPO_VIEW_PORDERSUMMARYRow.ItemArray = New Object() {PONO, PODATE, VENDORCODE, PODEPARTMENT, VENDORNAME, POVALUE, POTOTALVAT, POTOTALTAX, POADVANCE, POBALANCE, ITEMCODE, ITEMNAME, UOM, QUANTITY, RATE, DISCOUNT, TOTAL, ADDDATETIME}
            Me.Rows.Add(rowPO_VIEW_PORDERSUMMARYRow)
            Return rowPO_VIEW_PORDERSUMMARYRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PO_VIEW_PORDERSUMMARYDataTable = CType(MyBase.Clone,PO_VIEW_PORDERSUMMARYDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PO_VIEW_PORDERSUMMARYDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnPONO = Me.Columns("PONO")
            Me.columnPODATE = Me.Columns("PODATE")
            Me.columnVENDORCODE = Me.Columns("VENDORCODE")
            Me.columnPODEPARTMENT = Me.Columns("PODEPARTMENT")
            Me.columnVENDORNAME = Me.Columns("VENDORNAME")
            Me.columnPOVALUE = Me.Columns("POVALUE")
            Me.columnPOTOTALVAT = Me.Columns("POTOTALVAT")
            Me.columnPOTOTALTAX = Me.Columns("POTOTALTAX")
            Me.columnPOADVANCE = Me.Columns("POADVANCE")
            Me.columnPOBALANCE = Me.Columns("POBALANCE")
            Me.columnITEMCODE = Me.Columns("ITEMCODE")
            Me.columnITEMNAME = Me.Columns("ITEMNAME")
            Me.columnUOM = Me.Columns("UOM")
            Me.columnQUANTITY = Me.Columns("QUANTITY")
            Me.columnRATE = Me.Columns("RATE")
            Me.columnDISCOUNT = Me.Columns("DISCOUNT")
            Me.columnTOTAL = Me.Columns("TOTAL")
            Me.columnADDDATETIME = Me.Columns("ADDDATETIME")
        End Sub
        
        Private Sub InitClass()
            Me.columnPONO = New DataColumn("PONO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPONO)
            Me.columnPODATE = New DataColumn("PODATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPODATE)
            Me.columnVENDORCODE = New DataColumn("VENDORCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVENDORCODE)
            Me.columnPODEPARTMENT = New DataColumn("PODEPARTMENT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPODEPARTMENT)
            Me.columnVENDORNAME = New DataColumn("VENDORNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVENDORNAME)
            Me.columnPOVALUE = New DataColumn("POVALUE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPOVALUE)
            Me.columnPOTOTALVAT = New DataColumn("POTOTALVAT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPOTOTALVAT)
            Me.columnPOTOTALTAX = New DataColumn("POTOTALTAX", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPOTOTALTAX)
            Me.columnPOADVANCE = New DataColumn("POADVANCE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPOADVANCE)
            Me.columnPOBALANCE = New DataColumn("POBALANCE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPOBALANCE)
            Me.columnITEMCODE = New DataColumn("ITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMCODE)
            Me.columnITEMNAME = New DataColumn("ITEMNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMNAME)
            Me.columnUOM = New DataColumn("UOM", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUOM)
            Me.columnQUANTITY = New DataColumn("QUANTITY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQUANTITY)
            Me.columnRATE = New DataColumn("RATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRATE)
            Me.columnDISCOUNT = New DataColumn("DISCOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDISCOUNT)
            Me.columnTOTAL = New DataColumn("TOTAL", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTAL)
            Me.columnADDDATETIME = New DataColumn("ADDDATETIME", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDDATETIME)
            Me.columnPONO.ReadOnly = true
            Me.columnVENDORCODE.ReadOnly = true
            Me.columnPODEPARTMENT.ReadOnly = true
            Me.columnVENDORNAME.ReadOnly = true
            Me.columnPOVALUE.ReadOnly = true
            Me.columnPOTOTALVAT.ReadOnly = true
            Me.columnPOTOTALTAX.ReadOnly = true
            Me.columnPOADVANCE.ReadOnly = true
            Me.columnPOBALANCE.ReadOnly = true
            Me.columnITEMCODE.ReadOnly = true
            Me.columnITEMNAME.ReadOnly = true
            Me.columnUOM.ReadOnly = true
            Me.columnQUANTITY.ReadOnly = true
            Me.columnRATE.ReadOnly = true
            Me.columnDISCOUNT.ReadOnly = true
            Me.columnTOTAL.ReadOnly = true
            Me.columnADDDATETIME.ReadOnly = true
        End Sub
        
        Public Function NewPO_VIEW_PORDERSUMMARYRow() As PO_VIEW_PORDERSUMMARYRow
            Return CType(Me.NewRow,PO_VIEW_PORDERSUMMARYRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PO_VIEW_PORDERSUMMARYRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PO_VIEW_PORDERSUMMARYRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PO_VIEW_PORDERSUMMARYRowChangedEvent) Is Nothing) Then
                RaiseEvent PO_VIEW_PORDERSUMMARYRowChanged(Me, New PO_VIEW_PORDERSUMMARYRowChangeEvent(CType(e.Row,PO_VIEW_PORDERSUMMARYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PO_VIEW_PORDERSUMMARYRowChangingEvent) Is Nothing) Then
                RaiseEvent PO_VIEW_PORDERSUMMARYRowChanging(Me, New PO_VIEW_PORDERSUMMARYRowChangeEvent(CType(e.Row,PO_VIEW_PORDERSUMMARYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PO_VIEW_PORDERSUMMARYRowDeletedEvent) Is Nothing) Then
                RaiseEvent PO_VIEW_PORDERSUMMARYRowDeleted(Me, New PO_VIEW_PORDERSUMMARYRowChangeEvent(CType(e.Row,PO_VIEW_PORDERSUMMARYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PO_VIEW_PORDERSUMMARYRowDeletingEvent) Is Nothing) Then
                RaiseEvent PO_VIEW_PORDERSUMMARYRowDeleting(Me, New PO_VIEW_PORDERSUMMARYRowChangeEvent(CType(e.Row,PO_VIEW_PORDERSUMMARYRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePO_VIEW_PORDERSUMMARYRow(ByVal row As PO_VIEW_PORDERSUMMARYRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PO_VIEW_PORDERSUMMARYRow
        Inherits DataRow
        
        Private tablePO_VIEW_PORDERSUMMARY As PO_VIEW_PORDERSUMMARYDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePO_VIEW_PORDERSUMMARY = CType(Me.Table,PO_VIEW_PORDERSUMMARYDataTable)
        End Sub
        
        Public Property PONO As String
            Get
                Try 
                    Return CType(Me(Me.tablePO_VIEW_PORDERSUMMARY.PONOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePO_VIEW_PORDERSUMMARY.PONOColumn) = value
            End Set
        End Property
        
        Public Property PODATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePO_VIEW_PORDERSUMMARY.PODATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePO_VIEW_PORDERSUMMARY.PODATEColumn) = value
            End Set
        End Property
        
        Public Property VENDORCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePO_VIEW_PORDERSUMMARY.VENDORCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePO_VIEW_PORDERSUMMARY.VENDORCODEColumn) = value
            End Set
        End Property
        
        Public Property PODEPARTMENT As String
            Get
                Try 
                    Return CType(Me(Me.tablePO_VIEW_PORDERSUMMARY.PODEPARTMENTColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePO_VIEW_PORDERSUMMARY.PODEPARTMENTColumn) = value
            End Set
        End Property
        
        Public Property VENDORNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablePO_VIEW_PORDERSUMMARY.VENDORNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePO_VIEW_PORDERSUMMARY.VENDORNAMEColumn) = value
            End Set
        End Property
        
        Public Property POVALUE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePO_VIEW_PORDERSUMMARY.POVALUEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePO_VIEW_PORDERSUMMARY.POVALUEColumn) = value
            End Set
        End Property
        
        Public Property POTOTALVAT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePO_VIEW_PORDERSUMMARY.POTOTALVATColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePO_VIEW_PORDERSUMMARY.POTOTALVATColumn) = value
            End Set
        End Property
        
        Public Property POTOTALTAX As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePO_VIEW_PORDERSUMMARY.POTOTALTAXColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePO_VIEW_PORDERSUMMARY.POTOTALTAXColumn) = value
            End Set
        End Property
        
        Public Property POADVANCE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePO_VIEW_PORDERSUMMARY.POADVANCEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePO_VIEW_PORDERSUMMARY.POADVANCEColumn) = value
            End Set
        End Property
        
        Public Property POBALANCE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePO_VIEW_PORDERSUMMARY.POBALANCEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePO_VIEW_PORDERSUMMARY.POBALANCEColumn) = value
            End Set
        End Property
        
        Public Property ITEMCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePO_VIEW_PORDERSUMMARY.ITEMCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePO_VIEW_PORDERSUMMARY.ITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property ITEMNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablePO_VIEW_PORDERSUMMARY.ITEMNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePO_VIEW_PORDERSUMMARY.ITEMNAMEColumn) = value
            End Set
        End Property
        
        Public Property UOM As String
            Get
                Try 
                    Return CType(Me(Me.tablePO_VIEW_PORDERSUMMARY.UOMColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePO_VIEW_PORDERSUMMARY.UOMColumn) = value
            End Set
        End Property
        
        Public Property QUANTITY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePO_VIEW_PORDERSUMMARY.QUANTITYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePO_VIEW_PORDERSUMMARY.QUANTITYColumn) = value
            End Set
        End Property
        
        Public Property RATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePO_VIEW_PORDERSUMMARY.RATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePO_VIEW_PORDERSUMMARY.RATEColumn) = value
            End Set
        End Property
        
        Public Property DISCOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePO_VIEW_PORDERSUMMARY.DISCOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePO_VIEW_PORDERSUMMARY.DISCOUNTColumn) = value
            End Set
        End Property
        
        Public Property TOTAL As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePO_VIEW_PORDERSUMMARY.TOTALColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePO_VIEW_PORDERSUMMARY.TOTALColumn) = value
            End Set
        End Property
        
        Public Property ADDDATETIME As Date
            Get
                Try 
                    Return CType(Me(Me.tablePO_VIEW_PORDERSUMMARY.ADDDATETIMEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePO_VIEW_PORDERSUMMARY.ADDDATETIMEColumn) = value
            End Set
        End Property
        
        Public Function IsPONONull() As Boolean
            Return Me.IsNull(Me.tablePO_VIEW_PORDERSUMMARY.PONOColumn)
        End Function
        
        Public Sub SetPONONull()
            Me(Me.tablePO_VIEW_PORDERSUMMARY.PONOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPODATENull() As Boolean
            Return Me.IsNull(Me.tablePO_VIEW_PORDERSUMMARY.PODATEColumn)
        End Function
        
        Public Sub SetPODATENull()
            Me(Me.tablePO_VIEW_PORDERSUMMARY.PODATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVENDORCODENull() As Boolean
            Return Me.IsNull(Me.tablePO_VIEW_PORDERSUMMARY.VENDORCODEColumn)
        End Function
        
        Public Sub SetVENDORCODENull()
            Me(Me.tablePO_VIEW_PORDERSUMMARY.VENDORCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPODEPARTMENTNull() As Boolean
            Return Me.IsNull(Me.tablePO_VIEW_PORDERSUMMARY.PODEPARTMENTColumn)
        End Function
        
        Public Sub SetPODEPARTMENTNull()
            Me(Me.tablePO_VIEW_PORDERSUMMARY.PODEPARTMENTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVENDORNAMENull() As Boolean
            Return Me.IsNull(Me.tablePO_VIEW_PORDERSUMMARY.VENDORNAMEColumn)
        End Function
        
        Public Sub SetVENDORNAMENull()
            Me(Me.tablePO_VIEW_PORDERSUMMARY.VENDORNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPOVALUENull() As Boolean
            Return Me.IsNull(Me.tablePO_VIEW_PORDERSUMMARY.POVALUEColumn)
        End Function
        
        Public Sub SetPOVALUENull()
            Me(Me.tablePO_VIEW_PORDERSUMMARY.POVALUEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPOTOTALVATNull() As Boolean
            Return Me.IsNull(Me.tablePO_VIEW_PORDERSUMMARY.POTOTALVATColumn)
        End Function
        
        Public Sub SetPOTOTALVATNull()
            Me(Me.tablePO_VIEW_PORDERSUMMARY.POTOTALVATColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPOTOTALTAXNull() As Boolean
            Return Me.IsNull(Me.tablePO_VIEW_PORDERSUMMARY.POTOTALTAXColumn)
        End Function
        
        Public Sub SetPOTOTALTAXNull()
            Me(Me.tablePO_VIEW_PORDERSUMMARY.POTOTALTAXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPOADVANCENull() As Boolean
            Return Me.IsNull(Me.tablePO_VIEW_PORDERSUMMARY.POADVANCEColumn)
        End Function
        
        Public Sub SetPOADVANCENull()
            Me(Me.tablePO_VIEW_PORDERSUMMARY.POADVANCEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPOBALANCENull() As Boolean
            Return Me.IsNull(Me.tablePO_VIEW_PORDERSUMMARY.POBALANCEColumn)
        End Function
        
        Public Sub SetPOBALANCENull()
            Me(Me.tablePO_VIEW_PORDERSUMMARY.POBALANCEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMCODENull() As Boolean
            Return Me.IsNull(Me.tablePO_VIEW_PORDERSUMMARY.ITEMCODEColumn)
        End Function
        
        Public Sub SetITEMCODENull()
            Me(Me.tablePO_VIEW_PORDERSUMMARY.ITEMCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMNAMENull() As Boolean
            Return Me.IsNull(Me.tablePO_VIEW_PORDERSUMMARY.ITEMNAMEColumn)
        End Function
        
        Public Sub SetITEMNAMENull()
            Me(Me.tablePO_VIEW_PORDERSUMMARY.ITEMNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUOMNull() As Boolean
            Return Me.IsNull(Me.tablePO_VIEW_PORDERSUMMARY.UOMColumn)
        End Function
        
        Public Sub SetUOMNull()
            Me(Me.tablePO_VIEW_PORDERSUMMARY.UOMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQUANTITYNull() As Boolean
            Return Me.IsNull(Me.tablePO_VIEW_PORDERSUMMARY.QUANTITYColumn)
        End Function
        
        Public Sub SetQUANTITYNull()
            Me(Me.tablePO_VIEW_PORDERSUMMARY.QUANTITYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRATENull() As Boolean
            Return Me.IsNull(Me.tablePO_VIEW_PORDERSUMMARY.RATEColumn)
        End Function
        
        Public Sub SetRATENull()
            Me(Me.tablePO_VIEW_PORDERSUMMARY.RATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDISCOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePO_VIEW_PORDERSUMMARY.DISCOUNTColumn)
        End Function
        
        Public Sub SetDISCOUNTNull()
            Me(Me.tablePO_VIEW_PORDERSUMMARY.DISCOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTALNull() As Boolean
            Return Me.IsNull(Me.tablePO_VIEW_PORDERSUMMARY.TOTALColumn)
        End Function
        
        Public Sub SetTOTALNull()
            Me(Me.tablePO_VIEW_PORDERSUMMARY.TOTALColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDDATETIMENull() As Boolean
            Return Me.IsNull(Me.tablePO_VIEW_PORDERSUMMARY.ADDDATETIMEColumn)
        End Function
        
        Public Sub SetADDDATETIMENull()
            Me(Me.tablePO_VIEW_PORDERSUMMARY.ADDDATETIMEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PO_VIEW_PORDERSUMMARYRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PO_VIEW_PORDERSUMMARYRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PO_VIEW_PORDERSUMMARYRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PO_VIEW_PORDERSUMMARYRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
